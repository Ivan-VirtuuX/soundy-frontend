import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import React from "react";
import { MainLayout } from "@/layouts/MainLayout";
import styles from "./Posts.module.scss";
import { Post } from "@/components/Post";
import { usePosts } from "@/hooks/usePosts";
import { useInView } from "react-intersection-observer";
import { Api } from "@/api/index";
import { IPost } from "@/api/types";
import { InfinitySpin } from "react-loader-spinner";
import { PageTitle } from "@/components/UI/PageTitle";
import { BlueButton } from "@/components/UI/BlueButton";

import { useRouter } from "next/router";

const Posts: NextPage = () => {
  const [localPosts, setLocalPosts] = React.useState<IPost[]>([]);
  const [newPosts, setNewPosts] = React.useState<IPost[]>([]);
  const [page, setPage] = React.useState(1);
  const [isLoading, setIsLoading] = React.useState(false);

  const { posts, setPosts } = usePosts(newPosts, page);

  const router = useRouter();

  const { ref, inView } = useInView({
    threshold: 1,
    triggerOnce: true
  });

  React.useEffect(() => {
    (async () => {
      if (posts.length >= 5) {
        try {
          if (inView) {
            setIsLoading(true);

            const data = await Api().post.getAll(page);

            setNewPosts(data);

            setPage((page) => page + 1);

            setIsLoading(false);
          }
        } catch (err) {
          console.warn(err);

          setIsLoading(false);
        }
      }
    })();
  }, [inView]);

  return (
    <MainLayout fullWidth>
      <Head>
        <title>Посты</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicons/favicon.ico" />
      </Head>
      <main className={styles.container}>
        <PageTitle pageTitle="Посты" />
        <div style={{ marginBottom: 20 }} onClick={() => router.push("/write")}>
          <BlueButton text="Создать">
            <svg
              width="17"
              height="17"
              viewBox="0 0 17 17"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M14.3191 5.44074L10.5909 1.75113L11.819 0.521254C12.1553 0.184504 12.5684 0.0161285 13.0585 0.0161285C13.5486 0.0161285 13.9615 0.184504 14.2972 0.521254L15.5253 1.75113C15.8615 2.08788 16.037 2.49432 16.0516 2.97046C16.0662 3.44659 15.9054 3.85274 15.5691 4.18891L14.3191 5.44074ZM13.0471 6.7365L3.74848 16.0484H0.0202637V12.3148L9.31888 3.00296L13.0471 6.7365Z"
                fill="white"
              />
            </svg>
          </BlueButton>
        </div>
        {posts.map((post) => (
          <Post
            handleDelete={(postId: string) =>
              setPosts((posts) => [
                ...posts.filter((post) => post.postId !== postId)
              ])
            }
            innerRef={ref}
            {...post}
            key={post.postId}
          />
        ))}
        {isLoading && (
          <div className={styles.loadSpinner}>
            <InfinitySpin width="200" color="#181F92" />
          </div>
        )}
      </main>
    </MainLayout>
  );
};

export default Posts;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  if (!ctx.req.cookies.authToken) {
    return {
      redirect: {
        destination: "/",
        permanent: false
      }
    };
  }
  return {
    props: {}
  };
};
