import React from "react";
import { useInView } from "react-intersection-observer";
import { InfinitySpin } from "react-loader-spinner";

import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";

import { MainLayout } from "@/layouts/MainLayout";

import { Post } from "@/components/Post";
import { PageTitle } from "@/components/ui/PageTitle";
import { BlueButton } from "@/components/ui/BlueButton";
import { PencilIcon } from "@/components/ui/Icons/PencilIcon";

import { usePosts } from "@/hooks/usePosts";

import { IMessage, IPost } from "@/api/types";
import { Api } from "@/api/index";

import styles from "./Posts.module.scss";
import { socket } from "@/utils/SocketContext";
import { useAppSelector } from "@/redux/hooks";
import { selectUserData } from "@/redux/slices/user";
import { EmptyAvatar } from "@/components/ui/EmptyAvatar";
import { truncateString } from "@/utils/truncateString";
import { IconButton } from "@mui/material";
import { CrossIcon } from "@/components/ui/Icons/CrossIcon";

const Posts: NextPage = () => {
  const [newPosts, setNewPosts] = React.useState<IPost[]>([]);
  const [page, setPage] = React.useState(1);
  const [isLoading, setIsLoading] = React.useState(false);
  const [notificationMessage, setNotificationMessage] =
    React.useState<IMessage>(null);

  const { posts, setPosts } = usePosts(newPosts, page);

  const router = useRouter();

  const { ref, inView } = useInView({
    threshold: 1,
    triggerOnce: true,
  });

  const notificationBlockRef = React.useRef(null);

  const moveUp = [
    {
      opacity: 0,
      transition: "opacity 0.5s ease-in-out",
    },
    {
      opacity: 100,
      transition: "opacity 0.5s ease-in-out",
    },
  ];

  const moveDown = [
    {
      opacity: 100,
      transition: "opacity 0.5s ease-in-out",
    },
    {
      opacity: 0,
      transition: "opacity 0.5s ease-in-out",
    },
  ];

  const userData = useAppSelector(selectUserData);

  const onCloseNotification = () => {
    notificationBlockRef?.current?.animate(moveDown, 100);

    setTimeout(() => {
      setNotificationMessage(null);
    }, 100);
  };

  React.useEffect(() => {
    notificationMessage &&
      setTimeout(() => {
        notificationBlockRef?.current?.animate(moveDown, 1000);

        setTimeout(() => {
          setNotificationMessage(null);
        }, 900);
      }, 5000);
  }, [notificationMessage]);

  React.useEffect(() => {
    notificationMessage && notificationBlockRef?.current?.animate(moveUp, 100);
  }, [notificationMessage]);

  React.useEffect(() => {
    (async () => {
      if (posts.length >= 5) {
        try {
          if (inView) {
            setIsLoading(true);

            const data = await Api().post.getAll(page);

            setNewPosts(data);

            setPage((page) => page + 1);

            setIsLoading(false);
          }
        } catch (err) {
          console.warn(err);
        } finally {
          setIsLoading(false);
        }
      }
    })();
  }, [inView]);

  React.useEffect(() => {
    (async () => {
      try {
        socket.on("onMessage", async (payload) => {
          const { ...message } = payload;

          const data = await Api().conversation.getOne(message.conversationId);

          if (
            data.receiver?.userId === userData.id ||
            data.sender?.userId === userData.id
          ) {
            setNotificationMessage(message);
          }
        });
      } catch (err) {
        console.warn(err);
      }
    })();

    return () => {
      socket.off("onMessage");
      socket.off("onDeleteMessage");
      socket.off("message");
    };
  }, [socket]);

  return (
    <MainLayout fullWidth>
      <Head>
        <title>Посты</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicons/favicon.ico" />
      </Head>
      <main className={styles.container}>
        <PageTitle pageTitle="Посты" />
        <div style={{ marginBottom: 20 }} onClick={() => router.push("/write")}>
          <BlueButton color="primary" text="Создать">
            <PencilIcon width={17} height={17} />
          </BlueButton>
        </div>
        {posts.map((post) => (
          <Post
            handleDelete={(postId: string) =>
              setPosts((posts) => [
                ...posts.filter((post) => post.postId !== postId),
              ])
            }
            innerRef={ref}
            {...post}
            key={post.postId}
          />
        ))}
        {isLoading && (
          <div className={styles.loadSpinner}>
            <InfinitySpin width="200" color="#181F92" />
          </div>
        )}
        {notificationMessage && (
          <div className={styles.notificationBlock} ref={notificationBlockRef}>
            <div className={styles.notificationBlockInner}>
              {notificationMessage?.sender?.avatarUrl ? (
                <img
                  className={styles.notificationUserAvatar}
                  src={notificationMessage.sender.avatarUrl}
                  alt="user avatar"
                  onClick={() =>
                    router.push(
                      `/conversations/${notificationMessage.conversationId}`
                    )
                  }
                />
              ) : (
                <EmptyAvatar width={50} />
              )}
              <div className={styles.notificationBlockRightSide}>
                <div className={styles.notificationBlockContent}>
                  <span
                    onClick={() =>
                      router.push(
                        `/conversations/${notificationMessage.conversationId}`
                      )
                    }
                  >
                    {notificationMessage?.sender?.name}
                  </span>
                  <span
                    onClick={() =>
                      router.push(
                        `/conversations/${notificationMessage.conversationId}`
                      )
                    }
                  >
                    {notificationMessage?.sender?.surname}
                  </span>
                  <IconButton onClick={onCloseNotification}>
                    <CrossIcon color="#898989" />
                  </IconButton>
                </div>
                <p
                  onClick={() =>
                    router.push(
                      `/conversations/${notificationMessage.conversationId}`
                    )
                  }
                >
                  {truncateString(notificationMessage?.text, 15)}
                </p>
              </div>
            </div>
          </div>
        )}
      </main>
    </MainLayout>
  );
};

export default Posts;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  if (!ctx.req.cookies.authToken) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
};
