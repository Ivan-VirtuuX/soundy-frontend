import React from "react";

import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";

import { MainLayout } from "@/layouts/MainLayout";

import { SearchInput } from "@/components/UI/SearchInput";

import styles from "./Friends.module.scss";
import { BlueButton } from "@/components/UI/BlueButton";
import { PageTitle } from "@/components/UI/PageTitle";
import { NullResultsBlock } from "@/components/UI/NullResultsBlock";
import { Api } from "@/api/index";
import { useAppSelector } from "@/redux/hooks";
import { selectUserData } from "@/redux/slices/user";
import { IUser } from "@/api/types";
import { FriendItem } from "@/components/FriendItem";
import { useRouter } from "next/router";

const Friends: NextPage = () => {
  const [friends, setFriends] = React.useState<IUser[]>([]);
  const [searchText, setSearchText] = React.useState("");

  const userData = useAppSelector(selectUserData);

  const router = useRouter();

  React.useEffect(() => {
    (async () => {
      try {
        const data = await Api().user.getFriends(userData?.id);

        setFriends(data);
      } catch (err) {
        console.warn(err);
      }
    })();
  }, []);

  const onDeleteFriend = async (userId: string) => {
    try {
      setFriends([...friends.filter((friend) => friend.userId !== userId)]);

      await Api().user.deleteFriend(userData?.id, userId);
    } catch (err) {
      console.warn(err);
    }
  };

  return (
    <MainLayout fullWidth>
      <Head>
        <title>Друзья</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicons/favicon.ico" />
      </Head>
      <main className={styles.container}>
        <PageTitle pageTitle="Друзья" />
        <div className={styles.content}>
          <div className={styles.searchBlock}>
            <SearchInput handleChange={(text) => setSearchText(text)} />
            <BlueButton
              handleClick={() => router.push("/friend-requests")}
              text="Заявки"
              color="primary"
            >
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M21.0794 12.6724C21.3315 12.402 21.473 12.038 21.4735 11.6586V11.6499C21.4728 11.2656 21.3276 10.8973 21.0698 10.6259L15.5578 4.8077C15.4307 4.66877 15.2786 4.55796 15.1105 4.48173C14.9424 4.4055 14.7616 4.36537 14.5786 4.36369C14.3956 4.36202 14.2142 4.39882 14.0448 4.47195C13.8755 4.54509 13.7216 4.65309 13.5922 4.78967C13.4629 4.92624 13.3605 5.08864 13.2912 5.2674C13.222 5.44616 13.1871 5.63769 13.1887 5.83082C13.1903 6.02396 13.2283 6.21482 13.3005 6.39228C13.3727 6.56974 13.4777 6.73025 13.6093 6.86442L16.769 10.1997H3.55963C3.19417 10.1997 2.84367 10.3529 2.58524 10.6257C2.32682 10.8985 2.18164 11.2685 2.18164 11.6542C2.18164 12.04 2.32682 12.41 2.58524 12.6828C2.84367 12.9555 3.19417 13.1088 3.55963 13.1088H16.769L13.6093 16.4441C13.4777 16.5782 13.3727 16.7387 13.3005 16.9162C13.2283 17.0937 13.1903 17.2845 13.1887 17.4777C13.1871 17.6708 13.222 17.8623 13.2912 18.0411C13.3605 18.2198 13.4629 18.3822 13.5922 18.5188C13.7216 18.6554 13.8755 18.7634 14.0448 18.8365C14.2142 18.9097 14.3956 18.9465 14.5786 18.9448C14.7616 18.9431 14.9424 18.903 15.1105 18.8268C15.2786 18.7505 15.4307 18.6397 15.5578 18.5008L21.0698 12.6826L21.0794 12.6724Z"
                  fill="white"
                />
              </svg>
            </BlueButton>
          </div>
          {!friends.length ? (
            <NullResultsBlock text="Список друзей пуст" />
          ) : (
            <div
              className={styles.friendsBlock}
              style={{ gridTemplateColumns: friends?.length < 3 && "1fr" }}
            >
              {searchText
                ? friends
                    .filter(
                      (friend) =>
                        friend.name
                          .toLowerCase()
                          .includes(searchText.toLowerCase()) ||
                        friend.surname
                          .toLowerCase()
                          .includes(searchText.toLowerCase()) ||
                        friend.login
                          .toLowerCase()
                          .includes(searchText.toLowerCase())
                    )
                    .map((friend) => (
                      <FriendItem
                        key={friend.userId}
                        handleDelete={(userId: string) =>
                          onDeleteFriend(userId)
                        }
                        {...friend}
                      />
                    ))
                : friends?.map((friend) => (
                    <FriendItem
                      key={friend.userId}
                      handleDelete={(userId: string) => onDeleteFriend(userId)}
                      {...friend}
                    />
                  ))}
            </div>
          )}
        </div>
      </main>
    </MainLayout>
  );
};

export default Friends;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  if (!ctx.req.cookies.authToken) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
};
