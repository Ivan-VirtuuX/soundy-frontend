import React from "react";

import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";

import { MainLayout } from "@/layouts/MainLayout";

import { PageTitle } from "@/components/ui/PageTitle";
import { SearchInput } from "@/components/ui/SearchInput";
import { TrackItem } from "@/components/TrackItem";
import { NextTrackIcon } from "@/components/ui/Icons/NextTrackIcon";
import { PreviousTrackIcon } from "@/components/ui/Icons/PreviousTrackIcon";

import { musicTracks } from "@/musicTracks.data";

import { ITrack } from "@/api/types";
import { Api } from "@/api/index";

import { filterItems } from "@/utils/filterItems";

import { useAppSelector } from "@/redux/hooks";
import { selectUserData } from "@/redux/slices/user";

import styles from "./Music.module.scss";

const Music: NextPage = () => {
  const [isCurrentTrackPlaying, setIsCurrentTrackPlaying] =
    React.useState(false);
  const [currentTrack, setCurrentTrack] = React.useState<ITrack>();
  const [searchText, setSearchText] = React.useState("");
  const [userTracks, setUserTracks] = React.useState([]);

  const userData = useAppSelector(selectUserData);

  React.useEffect(() => {
    (async () => {
      try {
        const data = await Api().user.getOne(userData?.id);

        setUserTracks(data.playlist);
      } catch (err) {
        console.warn(err);
      }
    })();
  }, []);

  return (
    <MainLayout fullWidth>
      <Head>
        <title>Музыка</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicons/favicon.ico" />
      </Head>
      <main className={styles.container}>
        <PageTitle pageTitle="Музыка" />
        <div className={styles.searchBlock}>
          <SearchInput
            placeholder="Введите название трека"
            width={600}
            handleChange={(text) => setSearchText(text)}
          />
          <div className={styles.tracks}>
            {searchText
              ? filterItems(musicTracks, ["artist", "name"], searchText).map(
                  (track) => (
                    <TrackItem
                      key={track.id}
                      {...track}
                      currentTrack={currentTrack}
                      currentTrackSrc={currentTrack?.trackSrc}
                      handleClickTrack={(track) => setCurrentTrack(track)}
                      searchText={searchText}
                      userTracks={userTracks}
                      handleClickPlay={() => setIsCurrentTrackPlaying(true)}
                      handleClickStop={() => setIsCurrentTrackPlaying(false)}
                      isTrackPlaying={isCurrentTrackPlaying}
                      handleAddTrack={(track) =>
                        setUserTracks([...userTracks, track])
                      }
                      handleRemoveTrack={(track) =>
                        setUserTracks([
                          ...userTracks.filter(
                            (userTrack) => userTrack.id !== track.id
                          ),
                        ])
                      }
                    />
                  )
                )
              : musicTracks.map((track) => (
                  <TrackItem
                    key={track.id}
                    {...track}
                    currentTrack={currentTrack}
                    currentTrackSrc={currentTrack?.trackSrc}
                    handleClickTrack={(track) => setCurrentTrack(track)}
                    userTracks={userTracks}
                    handleClickPlay={() => setIsCurrentTrackPlaying(true)}
                    handleClickStop={() => setIsCurrentTrackPlaying(false)}
                    isTrackPlaying={isCurrentTrackPlaying}
                    handleAddTrack={(userTrack) =>
                      setUserTracks([...userTracks, userTrack])
                    }
                    handleRemoveTrack={(track) =>
                      setUserTracks([
                        ...userTracks.filter(
                          (userTrack) => userTrack.id !== track.id
                        ),
                      ])
                    }
                  />
                ))}
            {currentTrack && (
              <div className={styles.currentTrackBlock}>
                <div className={styles.trackActionsBlock}>
                  <PreviousTrackIcon
                    handleClick={() =>
                      musicTracks[0].id !== currentTrack.id &&
                      setCurrentTrack(
                        musicTracks.find(
                          (track) => track.id === currentTrack.id - 1
                        )
                      )
                    }
                  />
                  <NextTrackIcon
                    handleClick={() =>
                      musicTracks[musicTracks.length - 1].id !==
                        currentTrack.id &&
                      setCurrentTrack(
                        musicTracks.find(
                          (track) => track.id === currentTrack.id + 1
                        )
                      )
                    }
                  />
                </div>
                <TrackItem
                  {...currentTrack}
                  currentTrack={currentTrack}
                  currentTrackSrc={currentTrack?.trackSrc}
                  handleClickTrack={(track) => setCurrentTrack(track)}
                  handleClickPlay={() => setIsCurrentTrackPlaying(true)}
                  handleClickStop={() => setIsCurrentTrackPlaying(false)}
                  isTrackPlaying={isCurrentTrackPlaying}
                  userTracks={userTracks}
                  handleAddTrack={(track) =>
                    setUserTracks([...userTracks, track])
                  }
                  handleRemoveTrack={(track) =>
                    setUserTracks([
                      ...userTracks.filter(
                        (userTrack) => userTrack.id !== track.id
                      ),
                    ])
                  }
                  muted={false}
                />
              </div>
            )}
          </div>
        </div>
      </main>
    </MainLayout>
  );
};

export default Music;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  if (!ctx.req.cookies.authToken) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
};
