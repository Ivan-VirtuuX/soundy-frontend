import React from "react";

import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";

import { MainLayout } from "@/layouts/MainLayout";

import { PageTitle } from "@/components/ui/PageTitle";
import { SearchInput } from "@/components/SearchInput";
import { ConversationItem } from "@/components/ConversationItem";
import { Line } from "@/components/ui/Line";

import { useAppSelector } from "@/redux/hooks";
import { selectUserData } from "@/redux/slices/user";

import { IConversation } from "@/api/types";

import styles from "./Conversations.module.scss";
import { Api } from "@/api/index";

interface ConversationsProps {
  conversations: IConversation[];
}

const Conversations: NextPage<ConversationsProps> = ({ conversations }) => {
  const [searchText, setSearchText] = React.useState("");
  const [conversation, setConversation] = React.useState<IConversation>();
  const [localConversations, setLocalConversations] =
    React.useState<IConversation[]>(conversations);
  const [isLoading, setIsLoading] = React.useState(true);

  const userData = useAppSelector(selectUserData);

  const router = useRouter();

  return (
    <MainLayout fullWidth>
      <Head>
        <title>Сообщения</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicons/favicon.ico" />
      </Head>
      <main className={styles.container}>
        <PageTitle pageTitle="Сообщения" />
        <SearchInput handleChange={(text) => setSearchText(text)} width={600} />
        <div className={styles.conversationsBlock}>
          {localConversations?.map((obj) => (
            <React.Fragment key={obj.conversationId}>
              <ConversationItem {...obj} />
              {obj.conversationId !==
                localConversations[localConversations.length - 1]
                  ?.conversationId && <Line />}
            </React.Fragment>
          ))}
        </div>
      </main>
    </MainLayout>
  );
};

export default Conversations;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  if (!ctx.req.cookies.authToken) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  const data = await Api(ctx).conversation.getAll();

  return {
    props: { conversations: data },
  };
};
