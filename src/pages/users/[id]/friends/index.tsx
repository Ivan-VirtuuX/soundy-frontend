import React from "react";

import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";

import { MainLayout } from "@/layouts/MainLayout";

import { Api } from "@/api";
import { IUser } from "@/api/types";

import { PageTitle } from "@/components/ui/PageTitle";
import { NullResultsBlock } from "@/components/ui/NullResultsBlock";
import { UserItem } from "@/components/UserItem";
import { NotificationsBlock } from "@/components/NotificationsBlock";

import styles from "@/pages/friends/Friends.module.scss";
import { BlueButton } from "@/components/ui/BlueButton";
import { useRouter } from "next/router";
import { ArrowLeftIcon } from "@/components/ui/Icons/ArrowLeftIcon";

const Friends: NextPage = ({
  friends,
  user,
}: {
  friends: IUser[];
  user: IUser;
}) => {
  const router = useRouter();

  return (
    <MainLayout fullWidth>
      <Head>
        <title>{"Друзья " + user?.name + " " + user?.surname}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicons/favicon.ico" />
      </Head>
      <main className={styles.container}>
        <PageTitle pageTitle={"Друзья " + user?.name + " " + user?.surname} />
        <div className={styles.content}>
          <div
            className={styles.friendsBlock}
            style={{ gridTemplateColumns: friends?.length < 3 && "1fr" }}
          >
            {!friends?.length ? (
              <div className={styles.emptyRequestsBlock}>
                <NullResultsBlock text="Список друзей пуст" />
                <BlueButton
                  handleClick={() => router.push(`/users/${router.query.id}`)}
                  text="В профиль"
                  color="primary"
                  width={220}
                >
                  <ArrowLeftIcon color="#fff" width={20} height={20} />
                </BlueButton>
              </div>
            ) : (
              friends?.map((friend) => (
                <UserItem key={friend?.userId} {...friend} menuHidden />
              ))
            )}
          </div>
        </div>
        <NotificationsBlock />
      </main>
    </MainLayout>
  );
};

export default Friends;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  if (!ctx.req.cookies.authToken) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  const friends = await Api().user.getFriends(ctx.params.id);

  const user = await Api().user.getOne(ctx.params.id);

  return {
    props: { friends, user },
  };
};
