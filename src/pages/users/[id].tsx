import { GetServerSideProps, NextPage } from "next";
import { MainLayout } from "@/layouts/MainLayout";
import Head from "next/head";
import React from "react";
import { IPost, IUser } from "@/api/types";
import { Api } from "@/api/index";
import { EmptyAvatar } from "@/components/UI/EmptyAvatar";
import styles from "./Users.module.scss";
import { FriendsList } from "@/components/FriendsList";
import { BlueButton } from "@/components/UI/BlueButton";
import { Line } from "@/components/UI/Line";
import { PageTitle } from "@/components/UI/PageTitle";
import { usePosts } from "@/hooks/usePosts";
import { useInView } from "react-intersection-observer";
import { Post } from "@/components/Post";
import { InfinitySpin } from "react-loader-spinner";
import { Dialog, DialogContent, DialogContentText, IconButton } from "@mui/material";


const Users: NextPage<IUser> = ({
                                  id,
                                  login,
                                  name,
                                  surname,
                                  avatarUrl,
                                  birthDate

                                }) => {
  const [page, setPage] = React.useState(1);
  const [newPosts, setNewPosts] = React.useState<IPost[]>([]);
  const [isLoading, setIsLoading] = React.useState(false);
  const [isChangeAvatarOpen, setIsChangeAvatarOpen] = React.useState(false);


  const { posts, setPosts } = usePosts(newPosts, page);

  const { ref, inView } = useInView({
    threshold: 1,
    triggerOnce: true
  });

  React.useEffect(() => {
    (async () => {
      if (posts.length >= 5) {
        try {
          if (inView) {
            setIsLoading(true);

            const data = await Api().post.getAll(page);

            setNewPosts(data);

            setPage((page) => page + 1);

            setIsLoading(false);
          }
        } catch (err) {
          console.warn(err);

          setIsLoading(false);
        }
      }
    })();
  }, [inView]);

  return (
    <MainLayout fullWidth>
      <Head>
        <title>{name + " " + surname}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicons/favicon.ico" />
      </Head>
      <main className={styles.container}>
        <div className={styles.head}>
          <div className={styles.headContent}>
            <div className={styles.headContentLeftSide}>
              {avatarUrl ? (
                <img className={styles.avatar} src={avatarUrl} alt="avatar" />
              ) : (
                <div className={styles.avatarBlock}>
                  <EmptyAvatar width={150} />
                  <div className={styles.changeAvatarButton}>
                    <IconButton size="medium" color="primary">
                      <svg onClick={() => setIsChangeAvatarOpen(true)} width="19" height="19" viewBox="0 0 19 19"
                           fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g clip-path="url(#clip0_8_1175)">
                          <path
                            d="M9.90719 11.5349C11.2558 11.5349 12.3491 10.4416 12.3491 9.09302C12.3491 7.74442 11.2558 6.65116 9.90719 6.65116C8.55859 6.65116 7.46533 7.74442 7.46533 9.09302C7.46533 10.4416 8.55859 11.5349 9.90719 11.5349Z"
                            fill="#181F92" />
                          <path
                            d="M16.4187 3.39535H13.8385L12.8292 2.29651C12.6775 2.12997 12.4928 1.9969 12.2867 1.9058C12.0807 1.8147 11.858 1.76758 11.6327 1.76744H8.18153C7.72572 1.76744 7.28618 1.96279 6.97688 2.29651L5.97572 3.39535H3.39549C2.50014 3.39535 1.76758 4.12791 1.76758 5.02325V14.7907C1.76758 15.686 2.50014 16.4186 3.39549 16.4186H16.4187C17.3141 16.4186 18.0466 15.686 18.0466 14.7907V5.02325C18.0466 4.12791 17.3141 3.39535 16.4187 3.39535ZM9.90711 13.9767C7.6606 13.9767 5.83735 12.1535 5.83735 9.90698C5.83735 7.66046 7.6606 5.83721 9.90711 5.83721C12.1536 5.83721 13.9769 7.66046 13.9769 9.90698C13.9769 12.1535 12.1536 13.9767 9.90711 13.9767Z"
                            fill="#181F92" />
                        </g>
                        <defs>
                          <clipPath id="clip0_8_1175">
                            <rect width="17.907" height="17.907" fill="white"
                                  transform="translate(0.953613 0.139542)" />
                          </clipPath>
                        </defs>
                      </svg>
                    </IconButton>
                  </div>
                </div>
              )}
              <div className={styles.headContentUserInfo}>
                <div className={styles.userInfo}>
                  <div className={styles.nameSurnameBlock}>
                    <span className={styles.name}>{name}</span>
                    <span className={styles.surname}>{surname}</span>
                  </div>
                  <span className={styles.login}>{login}</span>
                </div>
                <div className={styles.birthDateBlock}>
                  <span className={styles.birthDateBlockTitle}>
                    Дата рождения
                  </span>
                  <span className={styles.birthDateBlockDate}>
                    {/*{new Date(birthDate).toLocaleDateString("ru-Ru")}*/}
                  </span>
                </div>
              </div>
            </div>
            <div className={styles.friendsBlock}>
              <div className={styles.friendsBlockHead}>
                <span className={styles.friendsBlockTitle}>Друзья</span>
                <span className={styles.friendsBlockFriendsCount}> 12</span>
              </div>
              <FriendsList />
            </div>
          </div>
          <div className={styles.profileActionsBlock}>
            <BlueButton size="sm" text="Редактировать">
              <svg
                width="15"
                height="15"
                viewBox="0 0 14 14"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M11.6882 5.01322L8.64066 2.00154L9.64455 0.997648C9.91943 0.722773 10.2572 0.585335 10.6578 0.585335C11.0584 0.585335 11.3959 0.722773 11.6703 0.997648L12.6742 2.00154C12.949 2.27642 13.0925 2.60818 13.1044 2.99683C13.1164 3.38548 12.9849 3.71701 12.71 3.9914L11.6882 5.01322ZM10.6484 6.0709L3.04754 13.6718H0V10.6243L7.60091 3.02336L10.6484 6.0709Z"
                  fill="white"
                />
              </svg>
            </BlueButton>
            <BlueButton size="sm" text="Сообщение">
              <svg
                width="15"
                height="15"
                viewBox="0 0 15 15"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M7.5 5.875V5.88313M4.25 5.875V5.88313M10.75 5.875V5.88313M1 14V3.4375C1 2.79103 1.25681 2.17105 1.71393 1.71393C2.17105 1.25681 2.79103 1 3.4375 1H11.5625C12.209 1 12.829 1.25681 13.2861 1.71393C13.7432 2.17105 14 2.79103 14 3.4375V8.3125C14 8.95897 13.7432 9.57895 13.2861 10.0361C12.829 10.4932 12.209 10.75 11.5625 10.75H4.25L1 14Z"
                  stroke="white"
                  strokeWidth="1.40541"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </BlueButton>
          </div>
          <Line />
        </div>
        <div className={styles.posts}>
          <PageTitle pageTitle="Посты" />
          {posts.map((post) => (
            <Post
              handleDelete={(postId: string) =>
                setPosts((posts) => [
                  ...posts.filter((post) => post.postId !== postId)
                ])
              }
              innerRef={ref}
              {...post}
              key={post.postId}
            />
          ))}
          {isLoading && (
            <div className={styles.loadSpinner}>
              <InfinitySpin width="200" color="#181F92" />
            </div>
          )}
        </div>
        <Dialog  open={isChangeAvatarOpen} onClose={() => setIsChangeAvatarOpen(false)} fullWidth maxWidth="sm"
                style={{ zIndex: 10000 }}  >
          <DialogContent className={styles.dialogContainer} >
            <DialogContentText>
              <h2>Редактирование аватара</h2>
            </DialogContentText>
          </DialogContent>
        </Dialog>
      </main>
    </MainLayout>
  );
};

export default Users;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  if (!ctx.req.cookies.authToken) {
    return {
      redirect: {
        destination: "/",
        permanent: false
      }
    };
  } else {
    try {
      const user = await Api().user.getOne(ctx.params.id);

      return {
        props: { ...user }
      };
    } catch (err) {
      console.warn(err);
    }
  }
};
